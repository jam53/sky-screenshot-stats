{"mappings":"ACSC,SAAA,EAAA,CAAA,CAAA,CAAA,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CACD,UAAY,SAAiB,CAAK,EAE9B,IAAI,EAAgB,IAAI,IAEpB,EAAiB,EACjB,EAAQ,EAAM,IAAI,CAClB,EAAa,EAAM,MAAM,CAExB,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAoJwC,EACC,EArJpC,EAAA,EAAY,CAAA,CAAA,OAAA,QAAA,CAAA,GAAZ,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EACL,CADK,IAAI,EAAJ,EAAA,KAAA,CAEG,EAAW,EAAK,IAAI,CACpB,EAAA,KAAA,EAEA,EAAA,KAAA,EACA,EAAA,KAAA,EAGA,EAAS,WAAW,GAAG,KAAK,CAAC,6BAE7B,EAAc,EAAS,KAAK,CAAC,mCAAqC,MAAM,CAAG,IAAI,CAAC,IAMhF,EAAc,AAFd,CAAA,EAAW,AADX,CAAA,EAAW,AADX,CAAA,EAAW,EAAS,OAAO,CAAC,CAAW,CAAC,EAAE,CAAE,GAA5C,EACoB,OAAO,CAAC,CAAW,CAAC,EAAE,CAAE,GAA5C,EACoB,OAAO,CAAC,CAAW,CAAC,EAAE,CAAE,GAA5C,EAEuB,KAAK,CAAC,oCAAsC,MAAM,CAAG,IAAI,CAAC,IAEjF,EAAc,EAAY,GAAG,CAAC,SAAA,CAA9B,EAAuC,OAAA,SAAS,E,GAChD,EAAc,EAAY,GAAG,CAAC,SAAA,CAA9B,EAAuC,OAAA,SAAS,E,GAEhD,CAAW,CAAC,EAAE,EAAI,EAAS,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","sources":["<anon>","js/WebWorkers/generate-creation-dates.js"],"sourcesContent":["/**\r\n * This WebWorker generates the CreationDates of all the screenshots\r\n *\r\n * By using WebWorkers, we try ot avoid freezing the page, while processing the files.\r\n * All the processing is handled separately from the UI thread, therefore the page doesn't get frozen.\r\n * However, when the user selects a large amount of files, lets say about 20K.\r\n * In that case the page will still freeze initially. We can't do anything about this however,\r\n * since it's the browser itself that is busy with collecting the files. At that point we aren't doing any\r\n * calculations yet inside any of our scripts.\r\n */ function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nonmessage = function process(event) {\n    var _Math, _Math1;\n    var creationDates = new Set(); //This set contains the creation date of all (valid) files in Unix time\n    var filesProcessed = 0;\n    var files = event.data;\n    var totalFiles = files.length;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var file = _step.value;\n            var fileName = file.name;\n            var dateTime = void 0; //The dateTime the screenshot was taken, in Unix time, adjusted to the user's local timezone\n            var matchesDate = void 0;\n            var matchesTime = void 0;\n            //region IOS (Extract Unix time from filename)\n            if (fileName.toLowerCase().match(/(am\\.[^.]*$|pm\\.[^.]*$)/)) {\n                matchesDate = fileName.match(/(20\\d\\d).?([0-1]\\d).?([0-3]\\d)/) || Array(4).fill(\"\");\n                fileName = fileName.replace(matchesDate[1], \"\");\n                fileName = fileName.replace(matchesDate[2], \"\");\n                fileName = fileName.replace(matchesDate[3], \"\");\n                matchesTime = fileName.match(/([ 12]\\d).?([0-5]\\d).?([0-5]\\d)/) || Array(4).fill(\"\");\n                matchesDate = matchesDate.map(function(match) {\n                    return parseInt(match);\n                });\n                matchesTime = matchesTime.map(function(match) {\n                    return parseInt(match);\n                });\n                matchesTime[1] += fileName.toLowerCase().match(/am\\.[^.]*$/) ? 0 : 12;\n                dateTime = new Date(matchesDate[1], matchesDate[2] - 1, matchesDate[3], matchesTime[1], matchesTime[2], matchesTime[3]).getTime();\n            }\n            //endregion\n            //region Android (Extract Unix time from filename)\n            if (!dateTime) {\n                matchesDate = fileName.match(/(20\\d\\d).?([0-1]\\d).?([0-3]\\d)/) || Array(4).fill(\"\");\n                fileName = fileName.replace(matchesDate[1], \"\");\n                fileName = fileName.replace(matchesDate[2], \"\");\n                fileName = fileName.replace(matchesDate[3], \"\");\n                matchesTime = fileName.match(/([0-2]\\d).?([0-5]\\d).?([0-5]\\d)/) || Array(4).fill(\"\");\n                matchesDate = matchesDate.map(function(match) {\n                    return parseInt(match);\n                });\n                matchesTime = matchesTime.map(function(match) {\n                    return parseInt(match);\n                });\n                dateTime = new Date(matchesDate[1], matchesDate[2] - 1, matchesDate[3], matchesTime[1], matchesTime[2], matchesTime[3]).getTime();\n            }\n            //endregion\n            //region file.lastModified (Extract Unix time from the file's properties)\n            if (!dateTime) dateTime = file.lastModified;\n            //endregion\n            //Check whether or not the date is valid. I.e. dateTime < present date + two days\n            if (dateTime < Date.now() + 172800000) {\n                dateTime += new Date(dateTime).getTimezoneOffset() * -60000; //Adjust for local timezone\n                creationDates.add(dateTime);\n            }\n            filesProcessed++;\n            var percentProcessed = Math.round(filesProcessed / totalFiles * 100);\n            postMessage(\"Files processed: \".concat(percentProcessed, \"% (\").concat(filesProcessed, \"/\").concat(totalFiles, \")\"));\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    postMessage(\"Sorting screenshots\");\n    creationDates = Array.from(creationDates);\n    creationDates.sort(function(a, b) {\n        return a - b;\n    });\n    postMessage(\"Generating stats from screenshots\");\n    //region amount of screenshots per day of the week\n    var screenshotsPerDay_Week = Array(7).fill(0); //Sunday being 0, Saturday being 6\n    creationDates.forEach(function(timestamp) {\n        var offset = new Date(timestamp).getTimezoneOffset() * 60000; //Adjust for local timezone\n        return screenshotsPerDay_Week[new Date(timestamp + offset).getDay()]++;\n    });\n    //endregion\n    //region milliseconds per day played, per day of the week ~ this is an average\n    var millisecondsPerDay_Week = Array(7).fill(0); //Sunday - 0, Saterday - 6\n    for(var i = 1; i < creationDates.length; i++)if (creationDates[i] - creationDates[i - 1] < 1200000) {\n        var offset = new Date(creationDates[i]).getTimezoneOffset() * 60000; //Adjust for local timezone\n        var day = new Date(creationDates[i] + offset).getDay(); //Sunday - 0, Saturday - 6\n        millisecondsPerDay_Week[day] += creationDates[i] - creationDates[i - 1];\n    }\n    //endregion\n    //region amount of screenshots per hour of the day\n    var screenshotsPerHour_Day = Array(24).fill(0); //0 = 00:00 ; 23 = 12pm\n    creationDates.forEach(function(timestamp) {\n        var offset = new Date(timestamp).getTimezoneOffset() * 60000; //Adjust for local timezone\n        return screenshotsPerHour_Day[new Date(timestamp + offset).getHours()]++;\n    });\n    //endregion\n    //region amount of screenshots per day, for every day played\n    var screenshotsPerDay_Playtime = {};\n    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n    try {\n        for(var _iterator1 = creationDates[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n            var timestamp = _step1.value;\n            var yyyy_mm_dd = new Date(timestamp).toISOString().slice(0, 10); //This outputs the day in: \"yyyy-mm-dd\"\n            var day1 = new Date(yyyy_mm_dd).getTime(); //Timestamp in Unix, representing the day the screenshot was taken.\n            screenshotsPerDay_Playtime[day1] = 1 + (screenshotsPerDay_Playtime[day1] || 0);\n        }\n    } catch (err) {\n        _didIteratorError1 = true;\n        _iteratorError1 = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                _iterator1.return();\n            }\n        } finally{\n            if (_didIteratorError1) {\n                throw _iteratorError1;\n            }\n        }\n    }\n    //endregion\n    //region milliseconds per day played, for every day played ~ this is an average\n    var millisecondsPerDay_Playtime = {}; //key: Day in Unix time, value: amount of milliseconds that day played.\n    for(var i1 = 1; i1 < creationDates.length; i1++)if (creationDates[i1] - creationDates[i1 - 1] < 1200000) {\n        var yyyy_mm_dd1 = new Date(creationDates[i1]).toISOString().slice(0, 10); //This outputs the day in: \"yyyy-mm-dd\"\n        var dayInUnix = new Date(yyyy_mm_dd1).getTime();\n        millisecondsPerDay_Playtime[dayInUnix] = creationDates[i1] - creationDates[i1 - 1] + (millisecondsPerDay_Playtime[dayInUnix] || 0);\n    }\n    //endregion\n    //region screenshots per month, for every month played\n    var screenshotsPerMonth_Playtime = Array(12).fill(0); //0 = jan ; 11 = dec\n    creationDates.forEach(function(timestamp) {\n        var offset = new Date(timestamp).getTimezoneOffset() * 60000; //Adjust for local timezone\n        return screenshotsPerMonth_Playtime[new Date(timestamp + offset).getMonth()]++;\n    });\n    //endregion\n    postMessage(\"Finishing touches\");\n    var generatedData = {};\n    generatedData[\"validFilesAmount\"] = creationDates.length;\n    generatedData[\"totalFiles\"] = files.length;\n    generatedData[\"screenshotsPerDay_Week\"] = screenshotsPerDay_Week;\n    generatedData[\"millisecondsPerDay_Week\"] = millisecondsPerDay_Week;\n    generatedData[\"screenshotsPerHour_Day\"] = screenshotsPerHour_Day;\n    generatedData[\"screenshotsPerDay_Playtime\"] = screenshotsPerDay_Playtime;\n    generatedData[\"millisecondsPerDay_Playtime\"] = millisecondsPerDay_Playtime;\n    generatedData[\"screenshotsPerMonth_Playtime\"] = screenshotsPerMonth_Playtime;\n    generatedData[\"daysSkyOpened\"] = Object.keys(screenshotsPerDay_Playtime).length;\n    generatedData[\"millisecondsPlayedTotal\"] = millisecondsPerDay_Week.reduce(function(partialSum, a) {\n        return partialSum + a;\n    }, 0); //Takes the sum\n    generatedData[\"screenshotsTotal\"] = screenshotsPerDay_Week.reduce(function(partialSum, a) {\n        return partialSum + a;\n    }, 0); //Takes the sum\n    generatedData[\"maxScreenshotsOnADay\"] = (_Math = Math).max.apply(_Math, _to_consumable_array(Object.values(screenshotsPerDay_Playtime))); //Takes the max value of the object\n    generatedData[\"maxMillisecondsOnADay\"] = (_Math1 = Math).max.apply(_Math1, _to_consumable_array(Object.values(millisecondsPerDay_Playtime))); //Takes the max value of the object\n    postMessage(generatedData); //Passing data back to the script that created this worker\n};\n\n//# sourceMappingURL=generate-creation-dates.e8bbdd74.js.map\n","/**\r\n * This WebWorker generates the CreationDates of all the screenshots\r\n *\r\n * By using WebWorkers, we try ot avoid freezing the page, while processing the files.\r\n * All the processing is handled separately from the UI thread, therefore the page doesn't get frozen.\r\n * However, when the user selects a large amount of files, lets say about 20K.\r\n * In that case the page will still freeze initially. We can't do anything about this however,\r\n * since it's the browser itself that is busy with collecting the files. At that point we aren't doing any\r\n * calculations yet inside any of our scripts.\r\n */\r\nonmessage = function process(event)\r\n{\r\n    let creationDates = new Set(); //This set contains the creation date of all (valid) files in Unix time\r\n\r\n    let filesProcessed = 0;\r\n    let files = event.data;\r\n    let totalFiles = files.length;\r\n\r\n    for (let file of files)\r\n    {\r\n        let fileName = file.name;\r\n        let dateTime; //The dateTime the screenshot was taken, in Unix time, adjusted to the user's local timezone\r\n\r\n        let matchesDate;\r\n        let matchesTime;\r\n\r\n        //region IOS (Extract Unix time from filename)\r\n        if (fileName.toLowerCase().match(/(am\\.[^.]*$|pm\\.[^.]*$)/))\r\n        {\r\n            matchesDate = fileName.match(/(20\\d\\d).?([0-1]\\d).?([0-3]\\d)/) || Array(4).fill(\"\");\r\n\r\n            fileName = fileName.replace(matchesDate[1], \"\");\r\n            fileName = fileName.replace(matchesDate[2], \"\");\r\n            fileName = fileName.replace(matchesDate[3], \"\");\r\n\r\n            matchesTime = fileName.match(/([ 12]\\d).?([0-5]\\d).?([0-5]\\d)/) || Array(4).fill(\"\");\r\n\r\n            matchesDate = matchesDate.map(match => parseInt(match));\r\n            matchesTime = matchesTime.map(match => parseInt(match));\r\n\r\n            matchesTime[1] += fileName.toLowerCase().match(/am\\.[^.]*$/) ? 0 : 12;\r\n\r\n            dateTime = (new Date(matchesDate[1], matchesDate[2] - 1, matchesDate[3], matchesTime[1], matchesTime[2], matchesTime[3])).getTime();\r\n        }\r\n        //endregion\r\n\r\n        //region Android (Extract Unix time from filename)\r\n        if (!dateTime) //If we don't have a valid dateTime yet\r\n        {\r\n            matchesDate = fileName.match(/(20\\d\\d).?([0-1]\\d).?([0-3]\\d)/) || Array(4).fill(\"\");\r\n\r\n            fileName = fileName.replace(matchesDate[1], \"\");\r\n            fileName = fileName.replace(matchesDate[2], \"\");\r\n            fileName = fileName.replace(matchesDate[3], \"\");\r\n\r\n            matchesTime = fileName.match(/([0-2]\\d).?([0-5]\\d).?([0-5]\\d)/) || Array(4).fill(\"\");\r\n\r\n            matchesDate = matchesDate.map(match => parseInt(match));\r\n            matchesTime = matchesTime.map(match => parseInt(match));\r\n\r\n            dateTime = (new Date(matchesDate[1], matchesDate[2] - 1, matchesDate[3], matchesTime[1], matchesTime[2], matchesTime[3])).getTime();\r\n        }\r\n        //endregion\r\n\r\n        //region file.lastModified (Extract Unix time from the file's properties)\r\n        if (!dateTime)\r\n        {\r\n            dateTime = file.lastModified;\r\n        }\r\n        //endregion\r\n\r\n        //Check whether or not the date is valid. I.e. dateTime < present date + two days\r\n        if (dateTime < Date.now() + (2 * 86400000))\r\n        {\r\n            dateTime += (new Date(dateTime)).getTimezoneOffset() * -60000; //Adjust for local timezone\r\n            creationDates.add(dateTime);\r\n        }\r\n\r\n        filesProcessed++;\r\n        let percentProcessed = Math.round((filesProcessed / totalFiles) * 100);\r\n        postMessage(`Files processed: ${percentProcessed}% (${filesProcessed}/${totalFiles})`);\r\n    }\r\n\r\n    postMessage(\"Sorting screenshots\");\r\n    creationDates = Array.from(creationDates);\r\n    creationDates.sort((a, b) => a - b);\r\n\r\n    postMessage(\"Generating stats from screenshots\");\r\n    //region amount of screenshots per day of the week\r\n    let screenshotsPerDay_Week = Array(7).fill(0); //Sunday being 0, Saturday being 6\r\n    creationDates.forEach(timestamp => {\r\n        let offset = (new Date(timestamp)).getTimezoneOffset() * 60000; //Adjust for local timezone\r\n        return screenshotsPerDay_Week[(new Date(timestamp + offset)).getDay()]++\r\n    });\r\n    //endregion\r\n\r\n    //region milliseconds per day played, per day of the week ~ this is an average\r\n    let millisecondsPerDay_Week = Array(7).fill(0); //Sunday - 0, Saterday - 6\r\n    for (let i = 1; i < creationDates.length; i++)\r\n    {\r\n        if (creationDates[i] - creationDates[i - 1] < 1200000)\r\n        {//If there is less than 20 minutes between the two screenshots.\r\n            let offset = (new Date(creationDates[i])).getTimezoneOffset() * 60000; //Adjust for local timezone\r\n            let day = (new Date(creationDates[i] + offset)).getDay(); //Sunday - 0, Saturday - 6\r\n\r\n            millisecondsPerDay_Week[day] += creationDates[i] - creationDates[i - 1];\r\n        }\r\n    }\r\n    //endregion\r\n\r\n    //region amount of screenshots per hour of the day\r\n    let screenshotsPerHour_Day = Array(24).fill(0); //0 = 00:00 ; 23 = 12pm\r\n    creationDates.forEach(timestamp => {\r\n        let offset = (new Date(timestamp)).getTimezoneOffset() * 60000; //Adjust for local timezone\r\n        return screenshotsPerHour_Day[(new Date(timestamp + offset)).getHours()]++\r\n    });\r\n    //endregion\r\n\r\n    //region amount of screenshots per day, for every day played\r\n    let screenshotsPerDay_Playtime = {};\r\n\r\n    for (let timestamp of creationDates)\r\n    {\r\n        let yyyy_mm_dd = (new Date(timestamp)).toISOString().slice(0,10); //This outputs the day in: \"yyyy-mm-dd\"\r\n        let day = (new Date(yyyy_mm_dd)).getTime(); //Timestamp in Unix, representing the day the screenshot was taken.\r\n\r\n        screenshotsPerDay_Playtime[day] = 1 + (screenshotsPerDay_Playtime[day] || 0);\r\n    }\r\n    //endregion\r\n\r\n    //region milliseconds per day played, for every day played ~ this is an average\r\n    let millisecondsPerDay_Playtime = {}; //key: Day in Unix time, value: amount of milliseconds that day played.\r\n    for (let i = 1; i < creationDates.length; i++)\r\n    {\r\n        if (creationDates[i] - creationDates[i - 1] < 1200000)\r\n        {//If there is less than 20 minutes between the two screenshots.\r\n            let yyyy_mm_dd = (new Date(creationDates[i])).toISOString().slice(0,10); //This outputs the day in: \"yyyy-mm-dd\"\r\n            let dayInUnix = (new Date(yyyy_mm_dd)).getTime();\r\n\r\n            millisecondsPerDay_Playtime[dayInUnix] = creationDates[i] - creationDates[i - 1] + (millisecondsPerDay_Playtime[dayInUnix] || 0);\r\n        }\r\n    }\r\n    //endregion\r\n\r\n    //region screenshots per month, for every month played\r\n    let screenshotsPerMonth_Playtime = Array(12).fill(0); //0 = jan ; 11 = dec\r\n    creationDates.forEach(timestamp => {\r\n        let offset = (new Date(timestamp)).getTimezoneOffset() * 60000; //Adjust for local timezone\r\n        return screenshotsPerMonth_Playtime[(new Date(timestamp + offset)).getMonth()]++\r\n    });\r\n    //endregion\r\n\r\n    postMessage(\"Finishing touches\");\r\n    let generatedData = {};\r\n    generatedData[\"validFilesAmount\"] = creationDates.length;\r\n    generatedData[\"totalFiles\"] = files.length;\r\n    generatedData[\"screenshotsPerDay_Week\"] = screenshotsPerDay_Week;\r\n    generatedData[\"millisecondsPerDay_Week\"] = millisecondsPerDay_Week;\r\n    generatedData[\"screenshotsPerHour_Day\"] = screenshotsPerHour_Day;\r\n    generatedData[\"screenshotsPerDay_Playtime\"] = screenshotsPerDay_Playtime;\r\n    generatedData[\"millisecondsPerDay_Playtime\"] = millisecondsPerDay_Playtime;\r\n    generatedData[\"screenshotsPerMonth_Playtime\"] = screenshotsPerMonth_Playtime;\r\n\r\n    generatedData[\"daysSkyOpened\"] = Object.keys(screenshotsPerDay_Playtime).length;\r\n    generatedData[\"millisecondsPlayedTotal\"] = millisecondsPerDay_Week.reduce((partialSum, a) => partialSum + a, 0); //Takes the sum\r\n    generatedData[\"screenshotsTotal\"] = screenshotsPerDay_Week.reduce((partialSum, a) => partialSum + a, 0); //Takes the sum\r\n    generatedData[\"maxScreenshotsOnADay\"] = Math.max(...(Object.values(screenshotsPerDay_Playtime))); //Takes the max value of the object\r\n    generatedData[\"maxMillisecondsOnADay\"] = Math.max(...(Object.values(millisecondsPerDay_Playtime))); //Takes the max value of the object\r\n\r\n\r\n    postMessage(generatedData); //Passing data back to the script that created this worker\r\n};\r\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","onmessage","event","creationDates","Set","filesProcessed","files","data","totalFiles","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_Math","_Math1","_step","_iterator","next","done","file","value","fileName","dateTime","matchesDate","matchesTime","toLowerCase","match","fill","replace","map","parseInt","Date","getTime","lastModified","now","getTimezoneOffset","add","percentProcessed","Math","round","postMessage","concat","err","return","sort","a","b","screenshotsPerDay_Week","forEach","timestamp","offset","getDay","millisecondsPerDay_Week","day","screenshotsPerHour_Day","getHours","screenshotsPerDay_Playtime","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","yyyy_mm_dd","toISOString","day1","millisecondsPerDay_Playtime","i1","dayInUnix","screenshotsPerMonth_Playtime","getMonth","generatedData","keys","reduce","partialSum","max","apply","values"],"version":3,"file":"generate-creation-dates.e8bbdd74.js.map"}