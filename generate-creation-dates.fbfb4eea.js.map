{"mappings":"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","sources":["js/WebWorkers/generate-creation-dates.js"],"sourcesContent":["/**\r\n * This WebWorker generates the CreationDates of all the screenshots\r\n *\r\n * By using WebWorkers, we try ot avoid freezing the page, while processing the files.\r\n * All the processing is handled separately from the UI thread, therefore the page doesn't get frozen.\r\n * However, when the user selects a large amount of files, lets say about 20K.\r\n * In that case the page will still freeze initially. We can't do anything about this however,\r\n * since it's the browser itself that is busy with collecting the files. At that point we aren't doing any\r\n * calculations yet inside any of our scripts.\r\n */\r\nonmessage = function process(event)\r\n{\r\n    let creationDates = new Set(); //This set contains the creation date of all (valid) files in Unix time\r\n\r\n    let filesProcessed = 0;\r\n    let files = event.data;\r\n    let totalFiles = files.length;\r\n\r\n    for (let file of files)\r\n    {\r\n        let fileName = file.name;\r\n        let dateTime; //The dateTime the screenshot was taken, in Unix time, adjusted to the user's local timezone\r\n\r\n        let matchesDate;\r\n        let matchesTime;\r\n\r\n        //region IOS (Extract Unix time from filename)\r\n        if (fileName.toLowerCase().match(/(am\\.[^.]*$|pm\\.[^.]*$)/))\r\n        {\r\n            matchesDate = fileName.match(/(20\\d\\d).?([0-1]\\d).?([0-3]\\d)/) || Array(4).fill(\"\");\r\n\r\n            fileName = fileName.replace(matchesDate[1], \"\");\r\n            fileName = fileName.replace(matchesDate[2], \"\");\r\n            fileName = fileName.replace(matchesDate[3], \"\");\r\n\r\n            matchesTime = fileName.match(/([ 12]\\d).?([0-5]\\d).?([0-5]\\d)/) || Array(4).fill(\"\");\r\n\r\n            matchesDate = matchesDate.map(match => parseInt(match));\r\n            matchesTime = matchesTime.map(match => parseInt(match));\r\n\r\n            matchesTime[1] += fileName.toLowerCase().match(/am\\.[^.]*$/) ? 0 : 12;\r\n\r\n            dateTime = (new Date(matchesDate[1], matchesDate[2] - 1, matchesDate[3], matchesTime[1], matchesTime[2], matchesTime[3])).getTime();\r\n        }\r\n        //endregion\r\n\r\n        //region Android (Extract Unix time from filename)\r\n        if (!dateTime) //If we don't have a valid dateTime yet\r\n        {\r\n            matchesDate = fileName.match(/(20\\d\\d).?([0-1]\\d).?([0-3]\\d)/) || Array(4).fill(\"\");\r\n\r\n            fileName = fileName.replace(matchesDate[1], \"\");\r\n            fileName = fileName.replace(matchesDate[2], \"\");\r\n            fileName = fileName.replace(matchesDate[3], \"\");\r\n\r\n            matchesTime = fileName.match(/([0-2]\\d).?([0-5]\\d).?([0-5]\\d)/) || Array(4).fill(\"\");\r\n\r\n            matchesDate = matchesDate.map(match => parseInt(match));\r\n            matchesTime = matchesTime.map(match => parseInt(match));\r\n\r\n            dateTime = (new Date(matchesDate[1], matchesDate[2] - 1, matchesDate[3], matchesTime[1], matchesTime[2], matchesTime[3])).getTime();\r\n        }\r\n        //endregion\r\n\r\n        //region file.lastModified (Extract Unix time from the file's properties)\r\n        if (!dateTime)\r\n        {\r\n            dateTime = file.lastModified;\r\n        }\r\n        //endregion\r\n\r\n        //Check whether or not the date is valid. I.e. dateTime < present date + two days\r\n        if (dateTime < Date.now() + (2 * 86400000))\r\n        {\r\n            dateTime += (new Date(dateTime)).getTimezoneOffset() * -60000; //Adjust for local timezone\r\n            creationDates.add(dateTime);\r\n        }\r\n\r\n        filesProcessed++;\r\n        let percentProcessed = Math.round((filesProcessed / totalFiles) * 100);\r\n        postMessage(`Files processed: ${percentProcessed}% (${filesProcessed}/${totalFiles})`);\r\n    }\r\n\r\n    postMessage(\"Sorting screenshots\");\r\n    creationDates = Array.from(creationDates);\r\n    creationDates.sort((a, b) => a - b);\r\n\r\n    postMessage(\"Generating stats from screenshots\");\r\n    //region amount of screenshots per day of the week\r\n    let screenshotsPerDay_Week = Array(7).fill(0); //Sunday being 0, Saturday being 6\r\n    creationDates.forEach(timestamp => {\r\n        let offset = (new Date(timestamp)).getTimezoneOffset() * 60000; //Adjust for local timezone\r\n        return screenshotsPerDay_Week[(new Date(timestamp + offset)).getDay()]++\r\n    });\r\n    //endregion\r\n\r\n    //region milliseconds per day played, per day of the week ~ this is an average\r\n    let millisecondsPerDay_Week = Array(7).fill(0); //Sunday - 0, Saterday - 6\r\n    for (let i = 1; i < creationDates.length; i++)\r\n    {\r\n        if (creationDates[i] - creationDates[i - 1] < 1200000)\r\n        {//If there is less than 20 minutes between the two screenshots.\r\n            let offset = (new Date(creationDates[i])).getTimezoneOffset() * 60000; //Adjust for local timezone\r\n            let day = (new Date(creationDates[i] + offset)).getDay(); //Sunday - 0, Saturday - 6\r\n\r\n            millisecondsPerDay_Week[day] += creationDates[i] - creationDates[i - 1];\r\n        }\r\n    }\r\n    //endregion\r\n\r\n    //region amount of screenshots per hour of the day\r\n    let screenshotsPerHour_Day = Array(24).fill(0); //0 = 00:00 ; 23 = 12pm\r\n    creationDates.forEach(timestamp => {\r\n        let offset = (new Date(timestamp)).getTimezoneOffset() * 60000; //Adjust for local timezone\r\n        return screenshotsPerHour_Day[(new Date(timestamp + offset)).getHours()]++\r\n    });\r\n    //endregion\r\n\r\n    //region amount of screenshots per day, for every day played\r\n    let screenshotsPerDay_Playtime = {};\r\n\r\n    for (let timestamp of creationDates)\r\n    {\r\n        let yyyy_mm_dd = (new Date(timestamp)).toISOString().slice(0,10); //This outputs the day in: \"yyyy-mm-dd\"\r\n        let day = (new Date(yyyy_mm_dd)).getTime(); //Timestamp in Unix, representing the day the screenshot was taken.\r\n\r\n        screenshotsPerDay_Playtime[day] = 1 + (screenshotsPerDay_Playtime[day] || 0);\r\n    }\r\n    //endregion\r\n\r\n    //region milliseconds per day played, for every day played ~ this is an average\r\n    let millisecondsPerDay_Playtime = {}; //key: Day in Unix time, value: amount of milliseconds that day played.\r\n    for (let i = 1; i < creationDates.length; i++)\r\n    {\r\n        if (creationDates[i] - creationDates[i - 1] < 1200000)\r\n        {//If there is less than 20 minutes between the two screenshots.\r\n            let yyyy_mm_dd = (new Date(creationDates[i])).toISOString().slice(0,10); //This outputs the day in: \"yyyy-mm-dd\"\r\n            let dayInUnix = (new Date(yyyy_mm_dd)).getTime();\r\n\r\n            millisecondsPerDay_Playtime[dayInUnix] = creationDates[i] - creationDates[i - 1] + (millisecondsPerDay_Playtime[dayInUnix] || 0);\r\n        }\r\n    }\r\n    //endregion\r\n\r\n    //region screenshots per month, for every month played\r\n    let screenshotsPerMonth_Playtime = Array(12).fill(0); //0 = jan ; 11 = dec\r\n    creationDates.forEach(timestamp => {\r\n        let offset = (new Date(timestamp)).getTimezoneOffset() * 60000; //Adjust for local timezone\r\n        return screenshotsPerMonth_Playtime[(new Date(timestamp + offset)).getMonth()]++\r\n    });\r\n    //endregion\r\n\r\n    postMessage(\"Finishing touches\");\r\n    let generatedData = {};\r\n    generatedData[\"validFilesAmount\"] = creationDates.length;\r\n    generatedData[\"totalFiles\"] = files.length;\r\n    generatedData[\"screenshotsPerDay_Week\"] = screenshotsPerDay_Week;\r\n    generatedData[\"millisecondsPerDay_Week\"] = millisecondsPerDay_Week;\r\n    generatedData[\"screenshotsPerHour_Day\"] = screenshotsPerHour_Day;\r\n    generatedData[\"screenshotsPerDay_Playtime\"] = screenshotsPerDay_Playtime;\r\n    generatedData[\"millisecondsPerDay_Playtime\"] = millisecondsPerDay_Playtime;\r\n    generatedData[\"screenshotsPerMonth_Playtime\"] = screenshotsPerMonth_Playtime;\r\n\r\n    generatedData[\"daysSkyOpened\"] = Object.keys(screenshotsPerDay_Playtime).length;\r\n    generatedData[\"millisecondsPlayedTotal\"] = millisecondsPerDay_Week.reduce((partialSum, a) => partialSum + a, 0); //Takes the sum\r\n    generatedData[\"screenshotsTotal\"] = screenshotsPerDay_Week.reduce((partialSum, a) => partialSum + a, 0); //Takes the sum\r\n    generatedData[\"maxScreenshotsOnADay\"] = Math.max(...(Object.values(screenshotsPerDay_Playtime))); //Takes the max value of the object\r\n    generatedData[\"maxMillisecondsOnADay\"] = Math.max(...(Object.values(millisecondsPerDay_Playtime))); //Takes the max value of the object\r\n\r\n\r\n    postMessage(generatedData); //Passing data back to the script that created this worker\r\n};\r\n"],"names":["_arrayLikeToArray","arr","len","onmessage","event","_Math","_Math1","creationDates","Set","filesProcessed","files","data","totalFiles","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","file","value","fileName","name","dateTime","matchesDate","matchesTime","toLowerCase","match","Array","fill","replace","map","parseInt","Date","getTime","lastModified","now","getTimezoneOffset","add","percentProcessed","Math","round","postMessage","concat","err","return","from","sort","a","b","screenshotsPerDay_Week","forEach","timestamp","offset","getDay","millisecondsPerDay_Week","i","screenshotsPerHour_Day","getHours","screenshotsPerDay_Playtime","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","yyyy_mm_dd","toISOString","slice","day1","millisecondsPerDay_Playtime","i1","yyyy_mm_dd1","dayInUnix","screenshotsPerMonth_Playtime","getMonth","generatedData","Object","keys","reduce","partialSum","max","apply","_toConsumableArray","values"],"version":3,"file":"generate-creation-dates.fbfb4eea.js.map"}