{"mappings":"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","sources":["js/WebWorkers/generate-creation-dates.js"],"sourcesContent":["/**\r\n * This WebWorker generates the CreationDates of all the screenshots\r\n *\r\n * By using WebWorkers, we try ot avoid freezing the page, while processing the files.\r\n * All the processing is handled separately from the UI thread, therefore the page doesn't get frozen.\r\n * However, when the user selects a large amount of files, lets say about 20K.\r\n * In that case the page will still freeze initially. We can't do anything about this however,\r\n * since it's the browser itself that is busy with collecting the files. At that point we aren't doing any\r\n * calculations yet inside any of our scripts.\r\n */\r\nonmessage = function process(event)\r\n{\r\n    let creationDates = new Set(); //This set contains the creation date of all (valid) files in Unix time\r\n\r\n    let filesProcessed = 0;\r\n    let files = event.data;\r\n    let totalFiles = files.length;\r\n\r\n    for (let file of files)\r\n    {\r\n        let fileName = file.name;\r\n        let dateTime; //The dateTime the screenshot was taken, in Unix time, adjusted to the user's local timezone\r\n\r\n        let matchesDate;\r\n        let matchesTime;\r\n\r\n        //region IOS (Extract Unix time from filename)\r\n        if (fileName.toLowerCase().match(/(am\\.[^.]*$|pm\\.[^.]*$)/))\r\n        {\r\n            matchesDate = fileName.match(/(20\\d\\d).?([0-1]\\d).?([0-3]\\d)/) || Array(4).fill(\"\");\r\n\r\n            fileName = fileName.replace(matchesDate[1], \"\");\r\n            fileName = fileName.replace(matchesDate[2], \"\");\r\n            fileName = fileName.replace(matchesDate[3], \"\");\r\n\r\n            matchesTime = fileName.match(/([ 12]\\d).?([0-5]\\d).?([0-5]\\d)/) || Array(4).fill(\"\");\r\n\r\n            matchesDate = matchesDate.map(match => parseInt(match));\r\n            matchesTime = matchesTime.map(match => parseInt(match));\r\n\r\n            matchesTime[1] += fileName.toLowerCase().match(/am\\.[^.]*$/) ? 0 : 12;\r\n\r\n            dateTime = (new Date(matchesDate[1], matchesDate[2] - 1, matchesDate[3], matchesTime[1], matchesTime[2], matchesTime[3])).getTime();\r\n        }\r\n        //endregion\r\n\r\n        //region Android (Extract Unix time from filename)\r\n        if (!dateTime) //If we don't have a valid dateTime yet\r\n        {\r\n            matchesDate = fileName.match(/(20\\d\\d).?([0-1]\\d).?([0-3]\\d)/) || Array(4).fill(\"\");\r\n\r\n            fileName = fileName.replace(matchesDate[1], \"\");\r\n            fileName = fileName.replace(matchesDate[2], \"\");\r\n            fileName = fileName.replace(matchesDate[3], \"\");\r\n\r\n            matchesTime = fileName.match(/([0-2]\\d).?([0-5]\\d).?([0-5]\\d)/) || Array(4).fill(\"\");\r\n\r\n            matchesDate = matchesDate.map(match => parseInt(match));\r\n            matchesTime = matchesTime.map(match => parseInt(match));\r\n\r\n            dateTime = (new Date(matchesDate[1], matchesDate[2] - 1, matchesDate[3], matchesTime[1], matchesTime[2], matchesTime[3])).getTime();\r\n        }\r\n        //endregion\r\n\r\n        //region file.lastModified (Extract Unix time from the file's properties)\r\n        if (!dateTime)\r\n        {\r\n            dateTime = file.lastModified;\r\n        }\r\n        //endregion\r\n\r\n        //Check whether or not the date is valid. I.e. dateTime < present date + two days\r\n        if (dateTime < Date.now() + (2 * 86400000))\r\n        {\r\n            dateTime += (new Date(dateTime)).getTimezoneOffset() * -60000; //Adjust for local timezone\r\n            creationDates.add(dateTime);\r\n        }\r\n\r\n        filesProcessed++;\r\n        let percentProcessed = Math.round((filesProcessed / totalFiles) * 100);\r\n        postMessage(`Files processed: ${percentProcessed}% (${filesProcessed}/${totalFiles})`);\r\n    }\r\n\r\n    postMessage(\"Sorting screenshots\");\r\n    creationDates = Array.from(creationDates);\r\n    creationDates.sort((a, b) => a - b);\r\n\r\n    postMessage(\"Generating stats from screenshots\");\r\n    //region amount of screenshots per day of the week\r\n    let screenshotsPerDay_Week = Array(7).fill(0); //Sunday being 0, Saturday being 6\r\n    creationDates.forEach(timestamp => {\r\n        let offset = (new Date(timestamp)).getTimezoneOffset() * 60000; //Adjust for local timezone\r\n        return screenshotsPerDay_Week[(new Date(timestamp + offset)).getDay()]++\r\n    });\r\n    //endregion\r\n\r\n    //region milliseconds per day played, per day of the week ~ this is an average\r\n    let millisecondsPerDay_Week = Array(7).fill(0); //Sunday - 0, Saterday - 6\r\n    for (let i = 1; i < creationDates.length; i++)\r\n    {\r\n        if (creationDates[i] - creationDates[i - 1] < 1200000)\r\n        {//If there is less than 20 minutes between the two screenshots.\r\n            let offset = (new Date(creationDates[i])).getTimezoneOffset() * 60000; //Adjust for local timezone\r\n            let day = (new Date(creationDates[i] + offset)).getDay(); //Sunday - 0, Saturday - 6\r\n\r\n            millisecondsPerDay_Week[day] += creationDates[i] - creationDates[i - 1];\r\n        }\r\n    }\r\n    //endregion\r\n\r\n    //region amount of screenshots per hour of the day\r\n    let screenshotsPerHour_Day = Array(24).fill(0); //0 = 00:00 ; 23 = 12pm\r\n    creationDates.forEach(timestamp => {\r\n        let offset = (new Date(timestamp)).getTimezoneOffset() * 60000; //Adjust for local timezone\r\n        return screenshotsPerHour_Day[(new Date(timestamp + offset)).getHours()]++\r\n    });\r\n    //endregion\r\n\r\n    //region amount of screenshots per day, for every day played\r\n    let screenshotsPerDay_Playtime = {};\r\n\r\n    for (let timestamp of creationDates)\r\n    {\r\n        let yyyy_mm_dd = (new Date(timestamp)).toISOString().slice(0,10); //This outputs the day in: \"yyyy-mm-dd\"\r\n        let day = (new Date(yyyy_mm_dd)).getTime(); //Timestamp in Unix, representing the day the screenshot was taken.\r\n\r\n        screenshotsPerDay_Playtime[day] = 1 + (screenshotsPerDay_Playtime[day] || 0);\r\n    }\r\n    //endregion\r\n\r\n    //region milliseconds per day played, for every day played ~ this is an average\r\n    let millisecondsPerDay_Playtime = {}; //key: Day in Unix time, value: amount of milliseconds that day played.\r\n    for (let i = 1; i < creationDates.length; i++)\r\n    {\r\n        if (creationDates[i] - creationDates[i - 1] < 1200000)\r\n        {//If there is less than 20 minutes between the two screenshots.\r\n            let yyyy_mm_dd = (new Date(creationDates[i])).toISOString().slice(0,10); //This outputs the day in: \"yyyy-mm-dd\"\r\n            let dayInUnix = (new Date(yyyy_mm_dd)).getTime();\r\n\r\n            millisecondsPerDay_Playtime[dayInUnix] = creationDates[i] - creationDates[i - 1] + (millisecondsPerDay_Playtime[dayInUnix] || 0);\r\n        }\r\n    }\r\n    //endregion\r\n\r\n    //region screenshots per month, for every month played\r\n    let screenshotsPerMonth_Playtime = Array(12).fill(0); //0 = jan ; 11 = dec\r\n    creationDates.forEach(timestamp => {\r\n        let offset = (new Date(timestamp)).getTimezoneOffset() * 60000; //Adjust for local timezone\r\n        return screenshotsPerMonth_Playtime[(new Date(timestamp + offset)).getMonth()]++\r\n    });\r\n    //endregion\r\n\r\n    postMessage(\"Finishing touches\");\r\n    let generatedData = {};\r\n    generatedData[\"validFilesAmount\"] = creationDates.length;\r\n    generatedData[\"totalFiles\"] = files.length;\r\n    generatedData[\"screenshotsPerDay_Week\"] = screenshotsPerDay_Week;\r\n    generatedData[\"millisecondsPerDay_Week\"] = millisecondsPerDay_Week;\r\n    generatedData[\"screenshotsPerHour_Day\"] = screenshotsPerHour_Day;\r\n    generatedData[\"screenshotsPerDay_Playtime\"] = screenshotsPerDay_Playtime;\r\n    generatedData[\"millisecondsPerDay_Playtime\"] = millisecondsPerDay_Playtime;\r\n    generatedData[\"screenshotsPerMonth_Playtime\"] = screenshotsPerMonth_Playtime;\r\n\r\n    generatedData[\"daysSkyOpened\"] = Object.keys(screenshotsPerDay_Playtime).length;\r\n    generatedData[\"millisecondsPlayedTotal\"] = millisecondsPerDay_Week.reduce((partialSum, a) => partialSum + a, 0); //Takes the sum\r\n    generatedData[\"screenshotsTotal\"] = screenshotsPerDay_Week.reduce((partialSum, a) => partialSum + a, 0); //Takes the sum\r\n    generatedData[\"maxScreenshotsOnADay\"] = Math.max(...(Object.values(screenshotsPerDay_Playtime))); //Takes the max value of the object\r\n    generatedData[\"maxMillisecondsOnADay\"] = Math.max(...(Object.values(millisecondsPerDay_Playtime))); //Takes the max value of the object\r\n\r\n\r\n    postMessage(generatedData); //Passing data back to the script that created this worker\r\n};\r\n"],"names":["_arrayLikeToArray","arr","len","event","_Math1","Set","data","files","length","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","_iteratorNormalCompletion","next","done","file","value","fileName","name","dateTime","matchesDate","toLowerCase","match","Array","fill","matchesTime","replace","map","parseInt","Date","getTime","lastModified","now","getTimezoneOffset","percentProcessed","Math","round","filesProcessed","totalFiles","return","from","creationDates","sort","a","b","postMessage","screenshotsPerDay_Week","forEach","timestamp","offset","getDay","millisecondsPerDay_Week","i","offset1","screenshotsPerHour_Day","getHours","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","timestamp1","toISOString","slice","day1","yyyy_mm_dd","_iterator1","millisecondsPerDay_Playtime","i1","yyyy_mm_dd1","dayInUnix","screenshotsPerMonth_Playtime","getMonth","generatedData","screenshotsPerDay_Playtime","Object","keys","reduce","partialSum"],"version":3,"file":"generate-creation-dates.fbfb4eea.js.map"}