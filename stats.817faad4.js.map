{"mappings":"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","sources":["node_modules/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.esm.js","node_modules/date-fns/esm/addDays/index.js","node_modules/date-fns/esm/_lib/toInteger/index.js","node_modules/date-fns/esm/toDate/index.js","node_modules/date-fns/esm/_lib/requiredArgs/index.js","node_modules/date-fns/esm/addHours/index.js","node_modules/date-fns/esm/addMilliseconds/index.js","node_modules/date-fns/esm/addMinutes/index.js","node_modules/date-fns/esm/addMonths/index.js","node_modules/date-fns/esm/addQuarters/index.js","node_modules/date-fns/esm/addSeconds/index.js","node_modules/date-fns/esm/addWeeks/index.js","node_modules/date-fns/esm/addYears/index.js","node_modules/date-fns/esm/differenceInDays/index.js","node_modules/date-fns/esm/differenceInCalendarDays/index.js","node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","node_modules/date-fns/esm/startOfDay/index.js","node_modules/date-fns/esm/differenceInHours/index.js","node_modules/date-fns/esm/constants/index.js","node_modules/date-fns/esm/differenceInMilliseconds/index.js","node_modules/date-fns/esm/_lib/roundingMethods/index.js","node_modules/date-fns/esm/differenceInMinutes/index.js","node_modules/date-fns/esm/differenceInMonths/index.js","node_modules/date-fns/esm/differenceInCalendarMonths/index.js","node_modules/date-fns/esm/compareAsc/index.js","node_modules/date-fns/esm/isLastDayOfMonth/index.js","node_modules/date-fns/esm/endOfDay/index.js","node_modules/date-fns/esm/endOfMonth/index.js","node_modules/date-fns/esm/differenceInQuarters/index.js","node_modules/date-fns/esm/differenceInSeconds/index.js","node_modules/date-fns/esm/differenceInWeeks/index.js","node_modules/date-fns/esm/differenceInYears/index.js","node_modules/date-fns/esm/differenceInCalendarYears/index.js","node_modules/date-fns/esm/endOfHour/index.js","node_modules/date-fns/esm/endOfMinute/index.js","node_modules/date-fns/esm/endOfQuarter/index.js","node_modules/date-fns/esm/endOfSecond/index.js","node_modules/date-fns/esm/endOfWeek/index.js","node_modules/date-fns/esm/endOfYear/index.js","node_modules/date-fns/esm/format/index.js","node_modules/date-fns/esm/isValid/index.js","node_modules/date-fns/esm/isDate/index.js","node_modules/date-fns/esm/locale/en-US/index.js","node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","node_modules/date-fns/esm/subMilliseconds/index.js","node_modules/date-fns/esm/_lib/format/formatters/index.js","node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","node_modules/date-fns/esm/_lib/getUTCWeek/index.js","node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","node_modules/date-fns/esm/_lib/format/longFormatters/index.js","node_modules/date-fns/esm/_lib/protectedTokens/index.js","node_modules/date-fns/esm/parse/index.js","node_modules/date-fns/esm/_lib/assign/index.js","node_modules/date-fns/esm/parse/_lib/parsers/index.js","node_modules/date-fns/esm/_lib/setUTCDay/index.js","node_modules/date-fns/esm/_lib/setUTCISODay/index.js","node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js","node_modules/date-fns/esm/_lib/setUTCWeek/index.js","node_modules/date-fns/esm/parseISO/index.js","node_modules/date-fns/esm/startOfHour/index.js","node_modules/date-fns/esm/startOfMinute/index.js","node_modules/date-fns/esm/startOfMonth/index.js","node_modules/date-fns/esm/startOfQuarter/index.js","node_modules/date-fns/esm/startOfSecond/index.js","node_modules/date-fns/esm/startOfWeek/index.js","node_modules/date-fns/esm/startOfYear/index.js","js/Charts/screenshotsPerDay_Playtime.js"],"sourcesContent":["/*!\n * chartjs-adapter-date-fns v2.0.0\n * https://www.chartjs.org\n * (c) 2021 chartjs-adapter-date-fns Contributors\n * Released under the MIT license\n */\nimport { _adapters } from 'chart.js';\nimport { toDate, parse, parseISO, isValid, format, addYears, addQuarters, addMonths, addWeeks, addDays, addHours, addMinutes, addSeconds, addMilliseconds, differenceInYears, differenceInQuarters, differenceInMonths, differenceInWeeks, differenceInDays, differenceInHours, differenceInMinutes, differenceInSeconds, differenceInMilliseconds, startOfYear, startOfQuarter, startOfMonth, startOfWeek, startOfDay, startOfHour, startOfMinute, startOfSecond, endOfYear, endOfQuarter, endOfMonth, endOfWeek, endOfDay, endOfHour, endOfMinute, endOfSecond } from 'date-fns';\n\nconst FORMATS = {\n  datetime: 'MMM d, yyyy, h:mm:ss aaaa',\n  millisecond: 'h:mm:ss.SSS aaaa',\n  second: 'h:mm:ss aaaa',\n  minute: 'h:mm aaaa',\n  hour: 'ha',\n  day: 'MMM d',\n  week: 'PP',\n  month: 'MMM yyyy',\n  quarter: 'qqq - yyyy',\n  year: 'yyyy'\n};\n\n_adapters._date.override({\n  _id: 'date-fns', // DEBUG\n\n  formats: function() {\n    return FORMATS;\n  },\n\n  parse: function(value, fmt) {\n    if (value === null || typeof value === 'undefined') {\n      return null;\n    }\n    const type = typeof value;\n    if (type === 'number' || value instanceof Date) {\n      value = toDate(value);\n    } else if (type === 'string') {\n      if (typeof fmt === 'string') {\n        value = parse(value, fmt, new Date(), this.options);\n      } else {\n        value = parseISO(value, this.options);\n      }\n    }\n    return isValid(value) ? value.getTime() : null;\n  },\n\n  format: function(time, fmt) {\n    return format(time, fmt, this.options);\n  },\n\n  add: function(time, amount, unit) {\n    switch (unit) {\n    case 'millisecond': return addMilliseconds(time, amount);\n    case 'second': return addSeconds(time, amount);\n    case 'minute': return addMinutes(time, amount);\n    case 'hour': return addHours(time, amount);\n    case 'day': return addDays(time, amount);\n    case 'week': return addWeeks(time, amount);\n    case 'month': return addMonths(time, amount);\n    case 'quarter': return addQuarters(time, amount);\n    case 'year': return addYears(time, amount);\n    default: return time;\n    }\n  },\n\n  diff: function(max, min, unit) {\n    switch (unit) {\n    case 'millisecond': return differenceInMilliseconds(max, min);\n    case 'second': return differenceInSeconds(max, min);\n    case 'minute': return differenceInMinutes(max, min);\n    case 'hour': return differenceInHours(max, min);\n    case 'day': return differenceInDays(max, min);\n    case 'week': return differenceInWeeks(max, min);\n    case 'month': return differenceInMonths(max, min);\n    case 'quarter': return differenceInQuarters(max, min);\n    case 'year': return differenceInYears(max, min);\n    default: return 0;\n    }\n  },\n\n  startOf: function(time, unit, weekday) {\n    switch (unit) {\n    case 'second': return startOfSecond(time);\n    case 'minute': return startOfMinute(time);\n    case 'hour': return startOfHour(time);\n    case 'day': return startOfDay(time);\n    case 'week': return startOfWeek(time);\n    case 'isoWeek': return startOfWeek(time, {weekStartsOn: +weekday});\n    case 'month': return startOfMonth(time);\n    case 'quarter': return startOfQuarter(time);\n    case 'year': return startOfYear(time);\n    default: return time;\n    }\n  },\n\n  endOf: function(time, unit) {\n    switch (unit) {\n    case 'second': return endOfSecond(time);\n    case 'minute': return endOfMinute(time);\n    case 'hour': return endOfHour(time);\n    case 'day': return endOfDay(time);\n    case 'week': return endOfWeek(time);\n    case 'month': return endOfMonth(time);\n    case 'quarter': return endOfQuarter(time);\n    case 'year': return endOfYear(time);\n    default: return time;\n    }\n  }\n});\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\n\nexport default function addHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\n\nexport default function addMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addQuarters\n * @category Quarter Helpers\n * @summary Add the specified number of year quarters to the given date.\n *\n * @description\n * Add the specified number of year quarters to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of quarters to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the quarters added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 1 quarter to 1 September 2014:\n * const result = addQuarters(new Date(2014, 8, 1), 1)\n * //=> Mon Dec 01 2014 00:00:00\n */\n\nexport default function addQuarters(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var months = amount * 3;\n  return addMonths(dirtyDate, months);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\n\nexport default function addSeconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * 1000);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of week to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the weeks added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\n\nexport default function addWeeks(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var days = amount * 7;\n  return addDays(dirtyDate, days);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import { millisecondsInHour } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function (value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n\n};\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","import { millisecondsInMinute } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * var result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import differenceInMonths from \"../differenceInMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInQuarters\n * @category Quarter Helpers\n * @summary Get the number of quarters between the given dates.\n *\n * @description\n * Get the number of quarters between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of full quarters\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full quarters are between 31 December 2013 and 2 July 2014?\n * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))\n * //=> 2\n */\n\nexport default function differenceInQuarters(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMonths(dateLeft, dateRight) / 3;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import differenceInDays from \"../differenceInDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInWeeks\n * @category Week Helpers\n * @summary Get the number of full weeks between the given dates.\n *\n * @description\n * Get the number of full weeks between two dates. Fractional weeks are\n * truncated towards zero by default.\n *\n * One \"full week\" is the distance between a local time in one day to the same\n * local time 7 days earlier or later. A full week can sometimes be less than\n * or more than 7*24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of full weeks\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\n * //=> 2\n *\n * // How many full weeks are between\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 8 weeks (54 days),\n * // even if DST starts and the period has\n * // only 54*24-1 hours.\n * const result = differenceInWeeks(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 6)\n * )\n * //=> 8\n */\n\nexport default function differenceInWeeks(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInDays(dateLeft, dateRight) / 7;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarYears from \"../differenceInCalendarYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\n\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n\n  dateLeft.setFullYear(1584);\n  dateRight.setFullYear(1584); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - Number(isLastYearNotFull)); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfHour\n * @category Hour Helpers\n * @summary Return the end of an hour for the given date.\n *\n * @description\n * Return the end of an hour for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of an hour for 2 September 2014 11:55:00:\n * const result = endOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:59:59.999\n */\n\nexport default function endOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMinute\n * @category Minute Helpers\n * @summary Return the end of a minute for the given date.\n *\n * @description\n * Return the end of a minute for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a minute for 1 December 2014 22:15:45.400:\n * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:59.999\n */\n\nexport default function endOfMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setSeconds(59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfQuarter\n * @category Quarter Helpers\n * @summary Return the end of a year quarter for the given date.\n *\n * @description\n * Return the end of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a quarter for 2 September 2014 11:55:00:\n * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3 + 3;\n  date.setMonth(month, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfSecond\n * @category Second Helpers\n * @summary Return the end of a second for the given date.\n *\n * @description\n * Return the end of a second for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a second for 1 December 2014 22:15:45.400:\n * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.999\n */\n\nexport default function endOfSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMilliseconds(999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport default function endOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfYear\n * @category Year Helpers\n * @summary Return the end of a year for the given date.\n *\n * @description\n * Return the end of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a year for 2 September 2014 11:55:00:\n * var result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Dec 31 2014 23:59:59.999\n */\n\nexport default function endOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  date.setFullYear(year + 1, 0, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import isValid from \"../isValid/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\n\nvar formatDistance = function (token, count, options) {\n  var result;\n  var tokenValue = formatDistanceLocale[token];\n\n  if (typeof tokenValue === 'string') {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace('{{count}}', count.toString());\n  }\n\n  if (options !== null && options !== void 0 && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n};\n\nexport default formatDistance;","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","export default function buildFormatLongFn(args) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // TODO: Remove String()\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\n\nvar formatRelative = function (token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n};\n\nexport default formatRelative;","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}; // Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\n\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nvar ordinalNumber = function (dirtyNumber, _options) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n};\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n\n    return valuesArray[index];\n  };\n}","import buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nimport buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","export default function buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}","export default function buildMatchPatternFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nimport lightFormatters from \"../lightFormatters/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport startOfUTCISOWeekYear from \"../startOfUTCISOWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import getUTCISOWeekYear from \"../getUTCISOWeekYear/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport startOfUTCWeekYear from \"../startOfUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import getUTCWeekYear from \"../getUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/) || [];\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","import defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport assign from \"../_lib/assign/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport parsers from \"./_lib/parsers/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward (toDate no longer accepts a string)\n *   toDate(1392098430000) // Unix to timestamp\n *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\n\nexport default function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {\n  requiredArgs(3, arguments);\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyReferenceDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale\n  }; // If timezone isn't specified, it will be set to the system timezone\n\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    subPriority: -1,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, subFnOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp);\n  var usedTokens = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n\n    if (parser) {\n      var incompatibleTokens = parser.incompatibleTokens;\n\n      if (Array.isArray(incompatibleTokens)) {\n        var incompatibleToken = void 0;\n\n        for (var _i = 0; _i < usedTokens.length; _i++) {\n          var usedToken = usedTokens[_i].token;\n\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n            incompatibleToken = usedTokens[_i];\n            break;\n          }\n        }\n\n        if (incompatibleToken) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n        }\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n        throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n      }\n\n      usedTokens.push({\n        token: firstCharacter,\n        fullToken: token\n      });\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        subPriority: parser.subPriority || 0,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      } // Replace two single quote characters with one single quote character\n\n\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).sort(function (a, b) {\n      return b.subPriority - a.subPriority;\n    });\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = toDate(dirtyReferenceDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      assign(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport setUTCDay from \"../../../_lib/setUTCDay/index.js\";\nimport setUTCISODay from \"../../../_lib/setUTCISODay/index.js\";\nimport setUTCISOWeek from \"../../../_lib/setUTCISOWeek/index.js\";\nimport setUTCWeek from \"../../../_lib/setUTCWeek/index.js\";\nimport startOfUTCISOWeek from \"../../../_lib/startOfUTCISOWeek/index.js\";\nimport startOfUTCWeek from \"../../../_lib/startOfUTCWeek/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_SECOND = 1000;\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/,\n  // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n  // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/,\n  // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/,\n  // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/,\n  // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/,\n  // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  minute: /^[0-5]?\\d/,\n  // 0 to 59\n  second: /^[0-5]?\\d/,\n  // 0 to 59\n  singleDigit: /^\\d/,\n  // 0 to 9\n  twoDigits: /^\\d{1,2}/,\n  // 0 to 99\n  threeDigits: /^\\d{1,3}/,\n  // 0 to 999\n  fourDigits: /^\\d{1,4}/,\n  // 0 to 9999\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/,\n  // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/,\n  // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/,\n  // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n\n};\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\n\nfunction parseNumericPattern(pattern, string, valueCallback) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  var value = parseInt(matchResult[0], 10);\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseTimezonePattern(pattern, string) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseAnyDigitsSigned(string, valueCallback) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);\n}\n\nfunction parseNDigits(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction parseNDigitsSigned(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction dayPeriodEnumToHours(enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n\n\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n        // A, B\n\n        case 'GGGGG':\n          return match.era(string, {\n            width: 'narrow'\n          });\n        // Anno Domini, Before Christ\n\n        case 'GGGG':\n        default:\n          return match.era(string, {\n            width: 'wide'\n          }) || match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n      }\n    },\n    set: function (date, flags, value, _options) {\n      flags.era = value;\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['R', 'u', 't', 'T']\n  },\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        };\n      };\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, _options) {\n      var currentYear = date.getUTCFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        };\n      };\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'Yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, options) {\n      var currentYear = getUTCWeekYear(date, options);\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options);\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (_date, _flags, value, _options) {\n      var firstWeekOfYear = new Date(0);\n      firstWeekOfYear.setUTCFullYear(value, 0, 4);\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n      return startOfUTCISOWeek(firstWeekOfYear);\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'Qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'QQQ':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'QQQQQ':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'QQQQ':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'qqq':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'qqqqq':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'qqqq':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Month\n  M: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'MM':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Mo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'MMM':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // J, F, ..., D\n\n        case 'MMMMM':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // January, February, ..., December\n\n        case 'MMMM':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'LL':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Lo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'LLL':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // J, F, ..., D\n\n        case 'LLLLL':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // January, February, ..., December\n\n        case 'LLLL':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'wo':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'Io':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Day of the month\n  d: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string);\n\n        case 'do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n      var month = date.getUTCMonth();\n\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH[month];\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCDate(value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of year\n  D: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string);\n\n        case 'Do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n\n      if (isLeapYear) {\n        return value >= 1 && value <= 366;\n      } else {\n        return value >= 1 && value <= 365;\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(0, value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'EEEEE':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'EEEEEE':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'EEEE':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'eo':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'eee':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'eeeee':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'eeeeee':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'eeee':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']\n  },\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'co':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'ccc':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // T\n\n        case 'ccccc':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tu\n\n        case 'cccccc':\n          return match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tuesday\n\n        case 'cccc':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']\n  },\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        if (value === 0) {\n          return 7;\n        }\n\n        return value;\n      };\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii':\n          // 02\n          return parseNDigits(token.length, string);\n        // 2nd\n\n        case 'io':\n          return match.ordinalNumber(string, {\n            unit: 'day'\n          });\n        // Tue\n\n        case 'iii':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // T\n\n        case 'iiiii':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tu\n\n        case 'iiiiii':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tuesday\n\n        case 'iiii':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 7;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCISODay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']\n  },\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaaa':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaa':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['b', 'B', 'H', 'k', 't', 'T']\n  },\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbbb':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbb':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'B', 'H', 'k', 't', 'T']\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBBB':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBB':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 't', 'T']\n  },\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string);\n\n        case 'ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 12;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['H', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string);\n\n        case 'Ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 23;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(value, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string);\n\n        case 'Ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['h', 'H', 'k', 't', 'T']\n  },\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string);\n\n        case 'ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 24;\n    },\n    set: function (date, _flags, value, _options) {\n      var hours = value <= 24 ? value % 24 : value;\n      date.setUTCHours(hours, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']\n  },\n  // Minute\n  m: {\n    priority: 60,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string);\n\n        case 'mo':\n          return match.ordinalNumber(string, {\n            unit: 'minute'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMinutes(value, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Second\n  s: {\n    priority: 50,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string);\n\n        case 'so':\n          return match.ordinalNumber(string, {\n            unit: 'second'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCSeconds(value, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Fraction of second\n  S: {\n    priority: 30,\n    parse: function (string, token, _match, _options) {\n      var valueCallback = function (value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3));\n      };\n\n      return parseNDigits(token.length, string, valueCallback);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMilliseconds(value);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'XXXX':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'XXXXX':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'x']\n  },\n  // Timezone (ISO-8601)\n  x: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'xxxx':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'xxxxx':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'X']\n  },\n  // Seconds timestamp\n  t: {\n    priority: 40,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value * 1000), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  },\n  // Milliseconds timestamp\n  T: {\n    priority: 20,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  }\n};\nexport default parsers;","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var day = toInteger(dirtyDay);\n\n  if (day % 7 === 0) {\n    day = day - 7;\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport getUTCISOWeek from \"../getUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getUTCISOWeek(date) - isoWeek;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport getUTCWeek from \"../getUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCWeek(dirtyDate, dirtyWeek, options) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getUTCWeek(date, options) - week;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import { millisecondsInHour, millisecondsInMinute } from \"../constants/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? 2 : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: NaN,\n    restDateString: ''\n  };\n  var year = captures[1] ? parseInt(captures[1]) : null;\n  var century = captures[2] ? parseInt(captures[2]) : null; // either year or century is null, not both\n\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return new Date(NaN);\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\n\nexport default function startOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMinute\n * @category Minute Helpers\n * @summary Return the start of a minute for the given date.\n *\n * @description\n * Return the start of a minute for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a minute for 1 December 2014 22:15:45.400:\n * const result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:00\n */\n\nexport default function startOfMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setSeconds(0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfQuarter\n * @category Quarter Helpers\n * @summary Return the start of a year quarter for the given date.\n *\n * @description\n * Return the start of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a quarter for 2 September 2014 11:55:00:\n * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Jul 01 2014 00:00:00\n */\n\nexport default function startOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3;\n  date.setMonth(month, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfSecond\n * @category Second Helpers\n * @summary Return the start of a second for the given date.\n *\n * @description\n * Return the start of a second for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a second\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a second for 1 December 2014 22:15:45.400:\n * const result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.000\n */\n\nexport default function startOfSecond(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMilliseconds(0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\n\nexport default function startOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var cleanDate = toDate(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import Chart from \"chart.js/auto\";\r\nimport 'chartjs-adapter-date-fns';\r\n\r\nconst ctx = document.getElementById(\"screenshotsPerDay_Playtime\").getContext(\"2d\");\r\n\r\nlet delayed;\r\n\r\nlet generatedData = JSON.parse(window.localStorage.getItem(\"generatedData\")); //The Data generated by the web worker\r\n\r\nlet screenshotsPerDay_Playtime = [];\r\nfor (const [key, value] of Object.entries(generatedData.screenshotsPerDay_Playtime))\r\n{//Takes Object, key: unix timestamp, value: amount of screenshots\r\n    //And makes Array, with every value of the array an object that looks as follows: {x: \"yyyy-mm-dd\", y: amount}\r\n    screenshotsPerDay_Playtime.push({x: (new Date(parseInt(key))).toISOString().substring(0, 10), y: value});\r\n}\r\n\r\n//Gradient Fill\r\nlet gradient = ctx.createLinearGradient(0, 0, 0, 400);\r\ngradient.addColorStop(0, 'rgba(58,123,213,1');\r\ngradient.addColorStop(1, 'rgba(0,210,255,0.3');\r\n\r\n\r\nconst data = {\r\n    datasets: [\r\n        {\r\n            data: screenshotsPerDay_Playtime,\r\n            label: \"Amount Of Screenshots\",\r\n            fill: true,\r\n            backgroundColor: gradient,\r\n            borderColor: \"#fff\",\r\n            pointBackgroundColor: \"#fff\",\r\n            tension: 0.4,\r\n        },\r\n    ],\r\n};\r\n\r\nconst config = {\r\n    type: 'bar',\r\n    data: data,\r\n    options: {\r\n        radius: 5,\r\n        hitRadius: 30,\r\n        hoverRadius: 12,\r\n        responsive: true,\r\n        animation: {\r\n            onComplete: () => {\r\n                delayed = true;\r\n            },\r\n            delay: (context) => {\r\n                let delay = 0;\r\n                if (context.type === \"data\" && context.mode === \"default\" && !delayed) {\r\n                    delay = context.dataIndex * 10 + context.dataIndex * 10;\r\n                }\r\n                return delay;\r\n            },\r\n        },\r\n        scales: {\r\n            x: {\r\n                grid: {\r\n                    display: false,\r\n                },\r\n                type: \"time\",\r\n                time: {\r\n                    unit: 'month',\r\n                },\r\n            },\r\n            y: {\r\n                beginAtZero: true,\r\n                grid: {\r\n                    display: true,\r\n                    color: \"#343434\"\r\n                },\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\nconst myChart = new Chart(ctx, config);\r\n"],"names":["$h87Cd","parcelRequire","$487d026aa0230d8b$var$FORMATS","datetime","millisecond","second","minute","hour","day","week","month","quarter","year","$bxbac","_adapters","_date","override","_id","formats","parse","value","fmt","type","$parcel$interopDefault","Date","$4w9L6","default","$e6EgV","this","options","$9ZY9Q","$jtrZ9","getTime","format","time","$27rhO","add","amount","unit","$d56xL","$84F4y","$kfIte","$jhomG","$rQnt3","$gFA2u","$cY2FS","$9vwGD","$lKt4q","diff","max","min","$bzgyS","$l8FvP","$3frD8","$iBXIA","$gYJXi","$6p8Of","$eGoH1","$3Scmx","$b1PAU","startOf","weekday","$cD2k3","$izmdR","$RHMXg","$0MShu","$6hFMo","weekStartsOn","$fysiS","$25MMT","$kgdbC","endOf","$iOWTf","$5ZfK7","$dYPh1","$7m6WV","$forQ5","$egU5P","$4P98x","$a71ST","$3UymP","$053b26d0412f91af$export$2e2bcd8739ae039","dirtyDate","dirtyAmount","$1Yiz5","arguments","date","isNaN","NaN","setDate","getDate","$2d9142a5cc6eaed9$export$2e2bcd8739ae039","dirtyNumber","number","Number","Math","ceil","floor","$34a1b8762f24994b$export$2e2bcd8739ae039","argument","argStr","Object","prototype","toString","call","console","warn","Error","stack","$16f9cbab60a20491$export$2e2bcd8739ae039","required","args","length","TypeError","$e092813080960616$var$MILLISECONDS_IN_HOUR","$e092813080960616$export$2e2bcd8739ae039","$9860d1675fe0c2dd$export$2e2bcd8739ae039","timestamp","$ebe7b440cc405aed$export$2e2bcd8739ae039","$970d29bd77ac2a17$export$2e2bcd8739ae039","dayOfMonth","endOfDesiredMonth","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","$6ec05d31e1ed8141$export$2e2bcd8739ae039","months","$5e0e8e93605a7a09$export$2e2bcd8739ae039","$c22c6e4c73c1ed9b$export$2e2bcd8739ae039","days","$fd54719dc4e59689$export$2e2bcd8739ae039","$c5c5e5bce0a11680$var$compareLocalAsc","dateLeft","dateRight","getHours","getMinutes","getSeconds","getMilliseconds","$c5c5e5bce0a11680$export$2e2bcd8739ae039","dirtyDateLeft","dirtyDateRight","sign","difference","abs","$958k6","isLastDayNotFull","result","$lOhid","$69cb097de340ead2$var$MILLISECONDS_IN_DAY","$69cb097de340ead2$export$2e2bcd8739ae039","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","round","$fe0bae73cda50417$export$2e2bcd8739ae039","utcDate","UTC","setUTCFullYear","$0025e9a8d564096a$export$2e2bcd8739ae039","setHours","$aunRy","$d8ca0173b4a6ed19$export$2e2bcd8739ae039","millisecondsInHour","$7Y39B","getRoundingMethod","roundingMethod","pow","$7a2f3765b05b35ce$export$91246f0b9bd9beff","$7a2f3765b05b35ce$export$7f72910d6dfd237a","$86bfcf62ed754fc5$export$2e2bcd8739ae039","$5cd09551248d231f$var$roundingMap","trunc","$5cd09551248d231f$export$b6474a47258c1211","method","$25d834962390df4b$export$2e2bcd8739ae039","millisecondsInMinute","$ab08246acda52d61$export$2e2bcd8739ae039","$jhYVc","$6z51S","isLastMonthNotFull","$Yflh3","$4c79e9ac801471e0$export$2e2bcd8739ae039","yearDiff","monthDiff","$e0aedc9af1c0dd49$export$2e2bcd8739ae039","$0b518156c1da5acb$export$2e2bcd8739ae039","$55affa770cc623b9$export$2e2bcd8739ae039","$a63e123849006a02$export$2e2bcd8739ae039","$2d20012e5916a14e$export$2e2bcd8739ae039","$f63a8bcfd5b08ddb$export$2e2bcd8739ae039","$4a9be939c80494ab$export$2e2bcd8739ae039","$8077cf46d1f41fac$export$2e2bcd8739ae039","$4jafb","isLastYearNotFull","$3230e2042515f1cd$export$2e2bcd8739ae039","$a2d8a6d1586bc36e$export$2e2bcd8739ae039","setMinutes","$45bedc7b1e8702fa$export$2e2bcd8739ae039","setSeconds","$3833033870ddd98f$export$2e2bcd8739ae039","currentMonth","$db3a93e08eb7e2c9$export$2e2bcd8739ae039","setMilliseconds","$b34eb12cfbb05833$export$2e2bcd8739ae039","dirtyOptions","locale","localeWeekStartsOn","defaultWeekStartsOn","RangeError","getDay","$75cc050ba90cc5aa$export$2e2bcd8739ae039","$18b166b77f49f7bc$var$formattingTokensRegExp","$18b166b77f49f7bc$var$longFormattingTokensRegExp","$18b166b77f49f7bc$var$escapedStringRegExp","$18b166b77f49f7bc$var$doubleQuoteRegExp","$18b166b77f49f7bc$var$unescapedLatinCharacterRegExp","$18b166b77f49f7bc$export$2e2bcd8739ae039","dirtyFormatStr","formatStr","String","$ilOD0","localeFirstWeekContainsDate","firstWeekContainsDate","defaultFirstWeekContainsDate","localize","formatLong","originalDate","timezoneOffset","$jcTf7","formatterOptions","_originalDate","match","map","substring","firstCharacter","longFormatter","$7h0Dh","join","$18b166b77f49f7bc$var$cleanEscapedString","formatter","$3nixV","useAdditionalWeekYearTokens","$4sEmV","isProtectedWeekYearToken","throwProtectedError","useAdditionalDayOfYearTokens","isProtectedDayOfYearToken","input","replace","$e29uG","$e2d66f0d8a9f4f2b$export$2e2bcd8739ae039","$a3789de5bd66c0c2$export$2e2bcd8739ae039","$ecdb8","$d5c175dda4903ae6$export$2e2bcd8739ae039","code","formatDistance","$88h4U","formatRelative","$eEfeg","$6H782","$3rw4a","$a55c68ab7cf51c55$var$formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","$a55c68ab7cf51c55$export$2e2bcd8739ae039","token","count","tokenValue","addSuffix","comparison","$l2oIC","$5ebc516e2e89d1fa$export$2e2bcd8739ae039","full","long","medium","short","defaultWidth","dateTime","$f50cf58135521e31$export$2e2bcd8739ae039","undefined","width","$aaa09d4e559ac663$var$formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","$aaa09d4e559ac663$export$2e2bcd8739ae039","_baseDate","_options","$83afn","$4dfc49d380f329a1$export$2e2bcd8739ae039","ordinalNumber","rem100","era","values","narrow","abbreviated","wide","argumentCallback","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","formattingValues","defaultFormattingWidth","$5dc68d5fd184b4da$export$2e2bcd8739ae039","dirtyIndex","valuesArray","context","_defaultWidth","_width","$3N1X2","$281cc463dfab1d34$export$2e2bcd8739ae039","matchPattern","parsePattern","valueCallback","parseInt","matchPatterns","defaultMatchWidth","parsePatterns","any","defaultParseWidth","index","$2c27762e6d274680$export$2e2bcd8739ae039","string","matchResult","matchedString","key","Array","isArray","$2c27762e6d274680$var$findIndex","pattern","test","$2c27762e6d274680$var$findKey","rest","slice","object","predicate","hasOwnProperty","array","$d21f172e7f1dd1a3$export$2e2bcd8739ae039","parseResult","$dfb9fd656c265c50$export$2e2bcd8739ae039","$aaOcQ","$2751e7f0fdcce30b$var$dayPeriodEnum","$2751e7f0fdcce30b$var$formatTimezoneShort","offset","dirtyDelimiter","absOffset","hours","minutes","delimiter","$jp8ET","$2751e7f0fdcce30b$var$formatTimezoneWithOptionalMinutes","$2751e7f0fdcce30b$var$formatTimezone","$2751e7f0fdcce30b$export$2e2bcd8739ae039","G","getUTCFullYear","y","signedYear","$38TYi","Y","signedWeekYear","$ajo3g","weekYear","twoDigitYear","R","isoWeekYear","$99Qk2","u","Q","getUTCMonth","q","M","L","w","$hFFdG","I","isoWeek","$legMq","d","getUTCDate","D","dayOfYear","E","dayOfWeek","getUTCDay","e","localDayOfWeek","c","i","isoDayOfWeek","a","dayPeriodEnumValue","getUTCHours","toLowerCase","b","B","h","H","K","k","m","getUTCMinutes","s","getUTCSeconds","S","X","_localize","getTimezoneOffset","x","O","z","t","T","$7681c8789a182a40$var$MILLISECONDS_IN_DAY","$7681c8789a182a40$export$2e2bcd8739ae039","setUTCMonth","setUTCHours","startOfYearTimestamp","$f747ebf4a3e410cf$var$MILLISECONDS_IN_WEEK","$f747ebf4a3e410cf$export$2e2bcd8739ae039","$gEwKN","$jafTH","$c1f9c9f9df986a02$export$2e2bcd8739ae039","setUTCDate","$df3b48616846f952$export$2e2bcd8739ae039","fourthOfJanuary","$6aad8a6f182cb919$export$2e2bcd8739ae039","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","$cdd63d63ac8b92ee$var$MILLISECONDS_IN_WEEK","$cdd63d63ac8b92ee$export$2e2bcd8739ae039","$iT8X7","$axZRV","$dc044edbfdcdc5af$export$2e2bcd8739ae039","$7adcfa4ca83eb5c4$export$2e2bcd8739ae039","firstWeek","$781e55e0d0c2d642$export$2e2bcd8739ae039","firstWeekOfNextYear","firstWeekOfThisYear","$e207118221003745$export$2e2bcd8739ae039","targetLength","output","$249d893990c3213c$export$2e2bcd8739ae039","toUpperCase","numberOfDigits","milliseconds","getUTCMilliseconds","fractionalSeconds","$54ba9c8806fb7055$var$dateLongFormatter","$54ba9c8806fb7055$var$timeLongFormatter","$54ba9c8806fb7055$export$2e2bcd8739ae039","p","P","dateTimeFormat","datePattern","timePattern","$33f9175d45c08f59$var$protectedDayOfYearTokens","$33f9175d45c08f59$var$protectedWeekYearTokens","$33f9175d45c08f59$export$c6cc36aa33304772","indexOf","$33f9175d45c08f59$export$c6b49d6dceb604a1","$33f9175d45c08f59$export$8073c1ae88f0e727","concat","$a450dd6176b94b78$var$formattingTokensRegExp","$a450dd6176b94b78$var$longFormattingTokensRegExp","$a450dd6176b94b78$var$escapedStringRegExp","$a450dd6176b94b78$var$doubleQuoteRegExp","$a450dd6176b94b78$var$notWhitespaceRegExp","$a450dd6176b94b78$var$unescapedLatinCharacterRegExp","$a450dd6176b94b78$export$2e2bcd8739ae039","dirtyDateString","dirtyFormatString","dirtyReferenceDate","dateString","formatString","subFnOptions","setters","priority","subPriority","set","$a450dd6176b94b78$var$dateToSystemTimezone","tokens","usedTokens","firstCharacter1","parser","$1e2Op","incompatibleTokens","incompatibleToken","_i","usedToken","fullToken","push","validate","$a450dd6176b94b78$var$cleanEscapedString","uniquePrioritySetters","setter","sort","filter","setterArray","flags","setter1","$fqU0n","timestampIsSet","convertedDate","$b3c4ba2adf7027c1$export$2e2bcd8739ae039","target","dirtyObject","property","$0e4947a7da7cc722$var$numericPatterns","$0e4947a7da7cc722$var$timezonePatterns","$0e4947a7da7cc722$var$parseNumericPattern","$0e4947a7da7cc722$var$parseTimezonePattern","$0e4947a7da7cc722$var$parseAnyDigitsSigned","$0e4947a7da7cc722$var$parseNDigits","n","RegExp","$0e4947a7da7cc722$var$parseNDigitsSigned","$0e4947a7da7cc722$var$dayPeriodEnumToHours","enumValue","$0e4947a7da7cc722$var$normalizeTwoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","$0e4947a7da7cc722$var$DAYS_IN_MONTH","$0e4947a7da7cc722$var$DAYS_IN_MONTH_LEAP_YEAR","$0e4947a7da7cc722$var$isLeapYearIndex","$0e4947a7da7cc722$export$2e2bcd8739ae039","isTwoDigitYear","normalizedTwoDigitYear","_match","_flags","firstWeekOfYear","$h8sNK","$ip9Rp","isLeapYear","$7NUeM","wholeWeekDays","$81Ep5","isPM","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","_token","$5ae8bb9a298de718$export$2e2bcd8739ae039","dirtyDay","currentDay","remainder","dayIndex","$5d7dc20f694b77f9$export$2e2bcd8739ae039","$d66235e3b1a9dbc5$export$2e2bcd8739ae039","dirtyISOWeek","$c7998662632c1b85$export$2e2bcd8739ae039","dirtyWeek","$747879a645f0ab42$export$2e2bcd8739ae039","additionalDigits","dateStrings","$747879a645f0ab42$var$splitDateString","parseYearResult","$747879a645f0ab42$var$parseYear","$747879a645f0ab42$var$parseDate","restDateString","$747879a645f0ab42$var$parseTime","timezone","$747879a645f0ab42$var$parseTimezone","$747879a645f0ab42$var$patterns","dateTimeDelimiter","timeZoneDelimiter","$747879a645f0ab42$var$dateRegex","$747879a645f0ab42$var$timeRegex","$747879a645f0ab42$var$timezoneRegex","timeString","split","substr","exec","regex","captures","century","isWeekDate","$747879a645f0ab42$var$parseDateUnit","_year","$747879a645f0ab42$var$validateWeekDate","fourthOfJanuaryDay","$747879a645f0ab42$var$dayOfISOWeekYear","$747879a645f0ab42$var$daysInMonths","$747879a645f0ab42$var$isLeapYearIndex","$747879a645f0ab42$var$validateDate","$747879a645f0ab42$var$validateDayOfYearDate","$747879a645f0ab42$var$parseTimeUnit","seconds","$747879a645f0ab42$var$validateTime","parseFloat","timezoneString","_hours","$747879a645f0ab42$var$validateTimezone","$0a16eadabdac1192$export$2e2bcd8739ae039","$d84cbbce6c5d8424$export$2e2bcd8739ae039","$b52ffc7a7b4eb1bc$export$2e2bcd8739ae039","$1861e4987a25b746$export$2e2bcd8739ae039","$931aedba34aafce3$export$2e2bcd8739ae039","$4934bd256c51f9d9$export$2e2bcd8739ae039","$ebff87cfba47e06e$export$2e2bcd8739ae039","cleanDate","$l4xbD","$6f77ae99658e260f$var$delayed","$6f77ae99658e260f$var$ctx","document","getElementById","getContext","$6f77ae99658e260f$var$generatedData","JSON","window","localStorage","getItem","$6f77ae99658e260f$var$screenshotsPerDay_Playtime","$6f77ae99658e260f$var$_iteratorNormalCompletion","$6f77ae99658e260f$var$_didIteratorError","$6f77ae99658e260f$var$_iteratorError","$6f77ae99658e260f$var$_step","$6f77ae99658e260f$var$_iterator","entries","screenshotsPerDay_Playtime","Symbol","iterator","next","done","$6f77ae99658e260f$var$_value","$6f77ae99658e260f$var$key","$6f77ae99658e260f$var$value","toISOString","err","return","$6f77ae99658e260f$var$gradient","createLinearGradient","addColorStop","$6f77ae99658e260f$var$config","data","datasets","label","fill","backgroundColor","borderColor","pointBackgroundColor","tension","radius","hitRadius","hoverRadius","responsive","animation","onComplete","delay","mode","dataIndex","scales","grid","display","beginAtZero","color","$3D7o2"],"version":3,"file":"stats.817faad4.js.map"}